请用程序描述如下事情：

    A同学报道登记信息
    B同学报道登记信息
    C同学报道登记信息
    A同学做自我介绍
    B同学做自我介绍
    C同学做自我介绍

stu_a = {
        "name":"A",
        "age":21,
        "gender":1,
        "hometown":"河北"
}
stu_b = {
        "name":"B",
        "age":22,
        "gender":0,
        "hometown":"山东"
}
stu_c = {
        "name":"C",
        "age":20,
        "gender":1,
        "hometown":"安徽"
}
def stu_intro(stu):
        """自我介绍"""
        for key, value in stu.items():
                print("key=%s, value=%d"%(key,value))

stu_intro(stu_a)
stu_intro(stu_b)
stu_intro(stu_c)

考虑现实生活中，我们的思维方式是放在学生这个个人上，是学生做了自我介绍。而不是像我们刚刚写出的代码，先有了介绍的行为，再去看介绍了谁。
用我们的现实思维方式该怎么用程序表达呢？

stu_a = Student(个人信息)
stu_b = Student(个人信息)
stu_c = Student(个人信息)
stu_a.intro()
stu_a.intro()
stu_a.intro()

    面向过程：根据业务逻辑从上到下写代码
    面向对象：将数据与函数绑定到一起，进行封装，这样能够更快速的开发程序，减少了重复代码的重写过程

面向过程编程最易被初学者接受，其往往用一长段代码来实现指定功能，开发过程的思路是将数据与函数按照执行的逻辑顺序组织在一起，数据与函数分开考虑。


def 发送邮件(内容)
        #发送邮件提醒
        连接邮箱服务器
        发送邮件
        关闭连接

while True：

        if cpu利用率 > 90%:
                发送邮件('CPU报警')

        if 硬盘使用空间 > 90%:
                发送邮件('硬盘报警')

        if 内存占用 > 80%:
                发送邮件('内存报警')

今天我们来学习一种新的编程方式：面向对象编程（Object Oriented Programming，OOP，面向对象程序设计）

    1）解决菜鸟买电脑的故事

    第一种方式:

        1)在网上查找资料

        2)根据自己预算和需求定电脑的型号 MacBook 15 顶配 1W8

        3)去市场找到苹果店各种店无法甄别真假 随便找了一家

        4)找到业务员,业务员推荐了另外一款 配置更高价格便宜,也是苹果系统的 1W

        5)砍价30分钟 付款9999

        6)成交

        回去之后发现各种问题

    第二种方式 :

        1)找一个靠谱的电脑高手

        2)给钱交易

    面向对象和面向过程都是解决问题的一种思路而已

        买电脑的第一种方式:
            强调的是步骤、过程、每一步都是自己亲自去实现的
            这种解决问题的思路我们就叫做面向过程

        买电脑的第二种方式:
            强调的是电脑高手, 电脑高手是处理这件事的主角,对我们而言,我们并不必亲自实现整个步骤只需要调用电脑高手就可以解决问题
            这种解决问题的思路就 是面向对象

        用面向对象的思维解决问题的重点
            当遇到一个需求的时候不用自己去实现，如果自己一步步实现那就是面向过程
            应该找一个专门做这个事的人来做
            面向对象是基于面向过程的

    2）解决吃啤酒鸭的问题

    第一种方式（面向过程）:

        1)养鸭子

        2)鸭子长成

        3)杀

        4)作料

        5)烹饪

        6)吃

        7)卒

    第二种方式（面向对象）:

        1)找个卖啤酒鸭的人

        2)给钱 交易

        3)吃

        4)胖6斤

    需要了解的定义性文字:

    面向对象(object-oriented ;简称: OO) 至今还没有统一的概念 我这里把它定义为: 按人们 认识客观世界的系统思维方式,采用基于对象(实体) 的概念建立模型,模拟客观世界分析、设 计、实现软件的办法。

    面向对象编程(Object Oriented Programming-OOP) 是一种解决软件复用的设计和编程方法。 这种方法把软件系统中相近相似的操作逻辑和操作 应用数据、状态,以类的型式描述出来,以对象实例的形式在软件系统中复用,以达到提高软件开发效率的作用。
类和对象
对象是面向对象编程的核心，在使用对象的过程中，为了将具有共同特征和行为的一组对象抽象定义，提出了另外一个新的概念——类

类就相当于制造飞机时的图纸，用它来进行创建的飞机就相当于对象

定义类

定义一个类，格式如下：


class 类名:
    方法列表

demo：定义一个Car类

# 定义类
class Car:
    # 方法
    def getCarInfo(self):
        print('车轮子个数:%d, 颜色%s'%(self.wheelNum, self.color))

    def move(self):
        print("车正在移动...")

说明：

    定义类时有2种：新式类和经典类，上面的Car为经典类，如果是Car(object)则为新式类
    类名 的命名规则按照"大驼峰"

创建对象

通过上一节课程，定义了一个Car类；就好比有车一个张图纸，那么接下来就应该把图纸交给生成工人们去生成了

python中，可以根据已经定义的类去创建出一个个对象

创建对象的格式为:

对象名 = 类名()

创建对象demo:


# 定义类
class Car:
    # 移动
    def move(self):
        print('车在奔跑...')

    # 鸣笛
    def toot(self):
        print("车在鸣笛...嘟嘟..")


# 创建一个对象，并用变量BMW来保存它的引用
BMW = Car()
BMW.color = '黑色'
BMW.wheelNum = 4 #轮子数量
BMW.move()
BMW.toot()
print(BMW.color)
print(BMW.wheelNum)
总结：

    BMW = Car()，这样就产生了一个Car的实例对象，此时也可以通过实例对象BMW来访问属性或者方法
    第一次使用BMW.color = '黑色'表示给BMW这个对象添加属性，如果后面再次出现BMW.color = xxx表示对属性进行修改
    BMW是一个对象，它拥有属性（数据）和方法（函数）
    当创建一个对象时，就是用一个模子，来制造一个实物
